import re
from dataclasses import dataclass
from typing import List, Tuple, Dict

@dataclass
class AIKeywordResult:
    is_ai: bool
    confidence: float
    keywords_found: List[str]
    reasoning: str
    source: str  # 'commit_message', 'file_content', 'none'

class AIKeywordDetector:
    """Detects AI-generated code by looking for explicit AI-related keywords"""
    
    def __init__(self):
        # High confidence AI keywords (explicit mentions)
        self.high_confidence_keywords = [
            # AI tools and platforms
            'cursor', 'copilot', 'chatgpt', 'gpt', 'claude', 'bard', 'gemini',
            'github copilot', 'github copilot', 'copilot x', 'copilot chat',
            'openai', 'anthropic', 'google ai', 'microsoft ai',
            
            # AI-related actions
            'ai generated', 'ai-assisted', 'ai helped', 'ai suggested',
            'generated by ai', 'written by ai', 'ai wrote', 'ai created',
            'ai completion', 'ai suggestion', 'ai recommendation',
            
            # Cursor-specific
            'cursor generated', 'cursor assisted', 'cursor helped',
            'cursor suggestion', 'cursor completion', 'cursor wrote',
            
            # Code generation
            'auto-generated', 'auto generated', 'generated code',
            'boilerplate', 'template generated', 'scaffold',
            
            # Explicit mentions
            'artificial intelligence', 'machine learning', 'ml',
            'neural network', 'deep learning', 'ai model'
        ]
        
        # Medium confidence keywords (likely AI-related)
        self.medium_confidence_keywords = [
            # Development tools that often use AI
            'intellisense', 'autocomplete', 'code completion',
            'smart suggestions', 'predictive coding',
            
            # AI-related patterns
            'assisted', 'assistance', 'helped by', 'suggested by', 'recommended by',
            'generated', 'auto', 'template', 'boilerplate',
            
            # Modern development practices that might indicate AI
            'copilot', 'assistant', 'helper', 'generator'
        ]
        
        # Low confidence keywords (could be AI-related)
        self.low_confidence_keywords = [
            'smart', 'intelligent', 'automatic', 'automated',
            'suggest', 'recommend', 'complete', 'assist',
            'help', 'generate', 'create', 'build'
        ]
        
        # Compile regex patterns for better performance
        self.high_confidence_patterns = [re.compile(rf'\b{re.escape(keyword)}\b', re.IGNORECASE) 
                                       for keyword in self.high_confidence_keywords]
        self.medium_confidence_patterns = [re.compile(rf'\b{re.escape(keyword)}\b', re.IGNORECASE) 
                                         for keyword in self.medium_confidence_keywords]
        self.low_confidence_patterns = [re.compile(rf'\b{re.escape(keyword)}\b', re.IGNORECASE) 
                                      for keyword in self.low_confidence_keywords]
    
    def detect_ai_keywords(self, commit_message: str, file_content: str = None) -> AIKeywordResult:
        """
        Detect AI keywords in commit message and optionally file content
        
        Args:
            commit_message: The git commit message
            file_content: Optional file content to also check
            
        Returns:
            AIKeywordResult with detection results
        """
        # Check commit message first (highest priority)
        commit_result = self._check_text_for_keywords(commit_message, 'commit_message')
        
        # If we found high confidence keywords in commit message, return immediately
        if commit_result.is_ai and commit_result.confidence >= 0.8:
            return commit_result
        
        # Check file content if provided
        if file_content:
            file_result = self._check_text_for_keywords(file_content, 'file_content')
            
            # If file content has high confidence keywords, use that
            if file_result.is_ai and file_result.confidence >= 0.8:
                return file_result
            
            # If commit message has medium confidence and file has some keywords, boost confidence
            if commit_result.is_ai and file_result.is_ai:
                combined_confidence = min(0.95, commit_result.confidence + file_result.confidence * 0.3)
                combined_keywords = list(set(commit_result.keywords_found + file_result.keywords_found))
                return AIKeywordResult(
                    is_ai=True,
                    confidence=combined_confidence,
                    keywords_found=combined_keywords,
                    reasoning=f"Found AI keywords in both commit message ({len(commit_result.keywords_found)} keywords) and file content ({len(file_result.keywords_found)} keywords)",
                    source='combined'
                )
            
            # If commit message has no AI keywords but file content does, use file result
            if not commit_result.is_ai and file_result.is_ai:
                return file_result
        
        # Return commit message result (even if low confidence)
        return commit_result
    
    def _check_text_for_keywords(self, text: str, source: str) -> AIKeywordResult:
        """Check text for AI keywords and return detection result"""
        if not text:
            return AIKeywordResult(is_ai=False, confidence=0.0, keywords_found=[], reasoning="No text provided", source=source)
        
        text_lower = text.lower()
        found_keywords = []
        confidence = 0.0
        reasoning_parts = []
        
        # Check high confidence keywords
        high_confidence_found = []
        for pattern in self.high_confidence_patterns:
            matches = pattern.findall(text)
            if matches:
                high_confidence_found.extend(matches)
        
        if high_confidence_found:
            found_keywords.extend(high_confidence_found)
            confidence = 0.9 + (len(high_confidence_found) * 0.05)  # 0.9-1.0 based on count
            reasoning_parts.append(f"High confidence AI keywords: {', '.join(set(high_confidence_found))}")
        
        # Check medium confidence keywords
        medium_confidence_found = []
        for pattern in self.medium_confidence_patterns:
            matches = pattern.findall(text)
            if matches:
                medium_confidence_found.extend(matches)
        
        if medium_confidence_found and not high_confidence_found:
            found_keywords.extend(medium_confidence_found)
            confidence = 0.6 + (len(medium_confidence_found) * 0.1)  # 0.6-0.8 based on count
            reasoning_parts.append(f"Medium confidence AI keywords: {', '.join(set(medium_confidence_found))}")
        elif medium_confidence_found and high_confidence_found:
            # If both high and medium found, just add medium to keywords but don't change confidence
            found_keywords.extend(medium_confidence_found)
            reasoning_parts.append(f"Additional medium confidence keywords: {', '.join(set(medium_confidence_found))}")
        
        # Check low confidence keywords (only if no higher confidence found)
        low_confidence_found = []
        if not high_confidence_found and not medium_confidence_found:
            for pattern in self.low_confidence_patterns:
                matches = pattern.findall(text)
                if matches:
                    low_confidence_found.extend(matches)
            
            if low_confidence_found:
                found_keywords.extend(low_confidence_found)
                confidence = 0.3 + (len(low_confidence_found) * 0.1)  # 0.3-0.5 based on count
                reasoning_parts.append(f"Low confidence AI keywords: {', '.join(set(low_confidence_found))}")
        
        # Determine if AI was detected
        is_ai = confidence >= 0.3
        
        # Create reasoning
        if reasoning_parts:
            reasoning = f"Found in {source}: {'; '.join(reasoning_parts)}"
        else:
            reasoning = f"No AI keywords found in {source}"
        
        return AIKeywordResult(
            is_ai=is_ai,
            confidence=min(1.0, confidence),
            keywords_found=list(set(found_keywords)),
            reasoning=reasoning,
            source=source
        )
    
    def get_keyword_stats(self) -> Dict[str, List[str]]:
        """Get statistics about the keywords being used for detection"""
        return {
            'high_confidence': self.high_confidence_keywords,
            'medium_confidence': self.medium_confidence_keywords,
            'low_confidence': self.low_confidence_keywords,
            'total_keywords': len(self.high_confidence_keywords) + len(self.medium_confidence_keywords) + len(self.low_confidence_keywords)
        }

# Convenience function for easy use
def detect_ai_keywords(commit_message: str, file_content: str = None) -> AIKeywordResult:
    """Convenience function to detect AI keywords"""
    detector = AIKeywordDetector()
    return detector.detect_ai_keywords(commit_message, file_content) 